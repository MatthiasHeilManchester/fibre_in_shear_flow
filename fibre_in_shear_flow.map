interface(echo=4);
with(LinearAlgebra):
with(plots):

#assume(W_hat,real);
#Digits:=40;


tangent_start:=Vector(2);
tangent_end  :=Vector(2);

tangent_start:=[cos(alpha_start),sin(alpha_start)];
tangent_end  :=[cos(alpha_end  ),sin(alpha_end)];


r_curved:=(s-1/2*s^2)*tangent_start+1/2*s^2*tangent_end;

angle_list:=[alpha_start=-Pi/2, alpha_end=0];
plot([subs(angle_list,r_curved[1]),
      subs(angle_list,r_curved[2]),      
      s=0..1],scaling=constrained);



###################################################################
# Roggeveen and Stone JFM
###################################################################


#-----------------------------------------------------------------------
# A matrix (3.5)
#-----------------------------------------------------------------------
A_matrix:=Matrix([[A11,A12,B13_tilde],
                  [A21,A22,B23_tilde],
                  [B31,B32,C33]]);

A11:=1/8*(5-2*q+(2*q-1)*cos(2*alpha));
A12:=1/8*(2*q-1)*sin(2*alpha);
A21:=A12;
A22:=1+1/4*(2*q-1)*(sin(alpha))^2;
B13_tilde:=-1/8*(1-2*q)^2*sin(alpha);
B31:=B13_tilde;
B23_tilde:=1/8*((2*q+1)^2+(1-2*q)^2*cos(alpha));
B32:=B23_tilde;
C33:=1/12+q^2;



#-----------------------------------------------------------------------
# G matrix (3.6)
#-----------------------------------------------------------------------
G_matrix:=Matrix([[G11_hat,G12_hat],
                  [G21_hat,G22_hat],
                  [H31_hat,H32_hat]]);


G11_hat:=1/32*(2*(2*q+1)^2 + 3*(1-2*q)^2*cos(alpha)-(1-2*q)^2*cos(3*alpha));
G12_hat:=1/8*(1-2*q)^2*(sin(alpha))^3;
G21_hat:=-1/16*(1-2*q)^2*(2+cos(2*alpha))*sin(alpha);
G22_hat:=1/32*(4*(2*q+1)^2+3*(1-2*q)^2*cos(alpha)+(1-2*q)^2*cos(3*alpha));
H31_hat:=1/24*(2*q-1)^3*sin(2*alpha);
H32_hat:=1/24*((2*q+1)^3-(2*q-1)^3*cos(2*alpha));


#-----------------------------------------------------------------------
# g hat matrix from (B5)
#-----------------------------------------------------------------------
g_hat_matrix:=MatrixInverse(A_matrix).G_matrix:

h31_hat:=g_hat_matrix[3,1];
h32_hat:=g_hat_matrix[3,2];

#-----------------------------------------------------------------------
# Check for the specific values quoted in Fig. 5
#-----------------------------------------------------------------------
specific_values_list:=[alpha=Pi/4,q=4/10];

#-----------------------------------------------------------------------
# Bit of confusion here. theta_0 is introduced as the "orientation such that 
# \dot{\theta} =0." but it isn't...
#-----------------------------------------------------------------------
theta_0:=evalf(subs(specific_values_list,1/2*arctan(h31_hat,h32_hat)));
condition_for_stable_fixed_point_this_has_to_be_bigger_than_1:=evalf(subs(specific_values_list,h31_hat^2+h32_hat^2));


#-----------------------------------------------------------------------
# Get the actual equilibrium angle by solving (2.17) from first principles
#-----------------------------------------------------------------------
soln_for_theta_eq:= solve(-1+h31*sin(2*theta)+h32*cos(2*theta)=0,theta);



#-----------------------------------------------------------------------
# Work it out! Yes, this gives the stable (and presumably the unstable)
# angles. One of them agrees with the one quoted in caption of Fig. 5.
#-----------------------------------------------------------------------
hh_31 := evalf(subs(specific_values_list,h31_hat));
hh_32 := evalf(subs(specific_values_list,h32_hat));
theta_eq1:=evalf(subs(h31=hh_31,h32=hh_32,soln_for_theta_eq[1]));
theta_eq2:=evalf(subs(h31=hh_31,h32=hh_32,soln_for_theta_eq[2]));





###################################################################
# Redo Roggeveen and Stone JFM but without the 6x6 matrix
###################################################################


#-----------------------------------------------------------------------
# Parametrise shape: Limits: 0 [symmetric] < q < 1/2 [straight because inclined
# arm then has zero length]
# l (q-1/2) < xi < l (q+1/2). Length are nondimensionalised on l so simply drop.
#-----------------------------------------------------------------------
r_body_frame_neg_xi[1]:=-xi*cos(alpha);
r_body_frame_neg_xi[2]:=-xi*sin(alpha);

#r_body_frame_pos_xi[1]:=xi;
#r_body_frame_pos_xi[2]:=0+W_hat^2*xi^2;

radius:=1/W_hat;
r_body_frame_pos_xi[1]:=radius*sin(xi*W_hat);
r_body_frame_pos_xi[2]:=radius-radius*cos(xi*W_hat); 


# Test parameters
test_parameters:=[q=0,alpha=0.3*Pi,W_hat=0.1,R0[1](t)=2*t,R0[2](t)=t,theta(t)=t];

#-----------------------------------------------------------------------
# Rotate:
#-----------------------------------------------------------------------
r_lab_frame_neg_xi[1]:=R0[1](t)+r_body_frame_neg_xi[1]*cos(theta(t))
                              -r_body_frame_neg_xi[2]*sin(theta(t));
r_lab_frame_neg_xi[2]:=R0[2](t)+r_body_frame_neg_xi[1]*sin(theta(t))
                              +r_body_frame_neg_xi[2]*cos(theta(t));

r_lab_frame_pos_xi[1]:=R0[1](t)+r_body_frame_pos_xi[1]*cos(theta(t))
                              -r_body_frame_pos_xi[2]*sin(theta(t));
r_lab_frame_pos_xi[2]:=R0[2](t)+r_body_frame_pos_xi[1]*sin(theta(t))
                              +r_body_frame_pos_xi[2]*cos(theta(t));



#-----------------------------------------------------------------------
# Have a look...
#-----------------------------------------------------------------------
animate(plot,[[
         [subs(test_parameters,r_lab_frame_neg_xi[1]),
          subs(test_parameters,r_lab_frame_neg_xi[2]),
          xi=-1/2..0],
         [subs(test_parameters,r_lab_frame_pos_xi[1]),
          subs(test_parameters,r_lab_frame_pos_xi[2]),
          xi=0..1/2]
         ]],t=0..1,scaling=constrained);



#-----------------------------------------------------------------------
# Tangents:
#-----------------------------------------------------------------------
non_normalised_tangent_lab_frame_neg_xi[1]:=diff(r_lab_frame_neg_xi[1],xi);
non_normalised_tangent_lab_frame_neg_xi[2]:=diff(r_lab_frame_neg_xi[2],xi);

non_normalised_tangent_lab_frame_pos_xi[1]:=diff(r_lab_frame_pos_xi[1],xi);
non_normalised_tangent_lab_frame_pos_xi[2]:=diff(r_lab_frame_pos_xi[2],xi);




#-----------------------------------------------------------------------
# Normalise (and get jacobian)
#-----------------------------------------------------------------------
ds_dxi_neg_xi:=simplify(sqrt(non_normalised_tangent_lab_frame_neg_xi[1]^2+
                             non_normalised_tangent_lab_frame_neg_xi[2]^2));
                             
ds_dxi_pos_xi:=simplify(sqrt(non_normalised_tangent_lab_frame_pos_xi[1]^2+
                             non_normalised_tangent_lab_frame_pos_xi[2]^2));


tangent_lab_frame_neg_xi[1]:=non_normalised_tangent_lab_frame_neg_xi[1]/ds_dxi_neg_xi;
tangent_lab_frame_neg_xi[2]:=non_normalised_tangent_lab_frame_neg_xi[2]/ds_dxi_neg_xi;

test_neg_xi:=simplify(tangent_lab_frame_neg_xi[1]^2+tangent_lab_frame_neg_xi[2]^2);

tangent_lab_frame_pos_xi[1]:=non_normalised_tangent_lab_frame_pos_xi[1]/ds_dxi_pos_xi;
tangent_lab_frame_pos_xi[2]:=non_normalised_tangent_lab_frame_pos_xi[2]/ds_dxi_pos_xi;

test_pos_xi:=simplify(tangent_lab_frame_pos_xi[1]^2+tangent_lab_frame_pos_xi[2]^2);


#-----------------------------------------------------------------------
# Far field velocity (non-dim on shear rate so drop gamma dot)
#-----------------------------------------------------------------------
test_flow_parameters:=[];
plot_test_flow_parameters:=[];


far_field_veloc_type:="constant_flow1";
far_field_veloc_type:="constant_flow2";
far_field_veloc_type:="rigid_body_rotation";
far_field_veloc_type:="shear_flow1";
far_field_veloc_type:="shear_flow2";
far_field_veloc_type:="shear_flow3";

#---------------------------------------------------
# Shear flow: Vertical straight fibre, centred at origin
# should experience zero drag. Correct.
#---------------------------------------------------
if far_field_veloc_type = "shear_flow1" then
  far_field_veloc_lab_frame:=Vector([x[2],0]);
  test_flow_parameters:=[q=0,alpha=Pi,theta(t)=Pi/2,R0[1](t)=0,R0[2](t)=0];
  plot_test_flow_parameters:=[UU=0.2,VV=0.2,t=0.2]; 
#---------------------------------------------------
# Shear flow: Vertical straight fibre, rotating with
# shear rate should experience zero drag and torque
# (at t=0 only!) Correct.
#---------------------------------------------------
elif far_field_veloc_type = "shear_flow2" then
  far_field_veloc_lab_frame:=Vector([x[2],0]);
  test_flow_parameters:=[q=0,alpha=Pi,theta(t)=Pi/2-t,R0[1](t)=0,R0[2](t)=0];
  plot_test_flow_parameters:=[UU=0.2,VV=0.2,t=0.2];
#---------------------------------------------------
# Shear flow; redoing JFM. We know that the angle
# is constant and that the particle drifts in y direction
# with constant speed. As it drifts it has to pick
# up speed (from the shear flow) but there's also an
# offset (UUU0). Functional form worked out backwards
# via some trial and error; JFM paper doesn't comment
# on this aspect.
#---------------------------------------------------
elif far_field_veloc_type = "shear_flow3" then
  far_field_veloc_lab_frame:=Vector([x[2],0]);
  test_flow_parameters:=[op(specific_values_list),theta(t)=Theta_eq,R0[1](t)=1/2*VV*t^2+UUU0*t,R0[2](t)=VV*t];
  plot_test_flow_parameters:=[Theta_eq=theta_eq1,VV=0.2,UUU0=0,t=0.2,W_hat=0.1]; 
#---------------------------------------------------
# Constant flow; should have drag only in x direction
#---------------------------------------------------
elif far_field_veloc_type = "constant_flow1" then
  far_field_veloc_lab_frame:=Vector([1,0]);
  test_flow_parameters:=[q=0,theta(t)=-alpha/2,R0[1](t)=0,R0[2](t)=0];
  plot_test_flow_parameters:=[alpha=0.3]; 
#---------------------------------------------------
# Constant flow; should have zero drag
#---------------------------------------------------
elif far_field_veloc_type = "constant_flow2" then
  far_field_veloc_lab_frame:=Vector([UU,VV]);
  test_flow_parameters:=[q=0,theta(t)=-alpha/2,R0[1](t)=UU*t,R0[2](t)=VV*t];
  plot_test_flow_parameters:=[UU=1,VV=1,alpha=0.3,t=0.2];
#---------------------------------------------------
# Rigid body rotation
#---------------------------------------------------
elif far_field_veloc_type = "rigid_body_rotation" then
  far_field_veloc_lab_frame:=Vector([-Omega*x[2],Omega*x[1]]);
  test_flow_parameters:=[q=0,theta(t)=Omega*t,R0[1](t)=0,R0[2](t)=0];
  plot_test_flow_parameters:=[Omega=0.3,alpha=0.3,t=0.2];
else
  print("ERROR: wrong far_field_veloc_type");
end if;



#-----------------------------------------------------------------------
# Far field velocity evaluated on fibre
#-----------------------------------------------------------------------
far_field_veloc_lab_frame_neg_xi:=subs(x[1]=r_lab_frame_neg_xi[1],x[2]=r_lab_frame_neg_xi[2],far_field_veloc_lab_frame);
far_field_veloc_lab_frame_pos_xi:=subs(x[1]=r_lab_frame_pos_xi[1],x[2]=r_lab_frame_pos_xi[2],far_field_veloc_lab_frame);



#-----------------------------------------------------------------------
# Fibre velocity from kinematics
#-----------------------------------------------------------------------
fibre_veloc_lab_frame_neg_xi:=Vector([diff(r_lab_frame_neg_xi[1],t),
                                     diff(r_lab_frame_neg_xi[2],t)]);

fibre_veloc_lab_frame_pos_xi:=Vector([diff(r_lab_frame_pos_xi[1],t),
                                     diff(r_lab_frame_pos_xi[2],t)]);





#-----------------------------------------------------------------------
# Resistance matrix
#-----------------------------------------------------------------------
resistance_matrix_neg_xi:=Matrix([[1-1/2*tangent_lab_frame_neg_xi[1]^2,                             -1/2*tangent_lab_frame_neg_xi[1]*tangent_lab_frame_neg_xi[2]],
                                 [  -1/2*tangent_lab_frame_neg_xi[1]*tangent_lab_frame_neg_xi[2],  1-1/2*tangent_lab_frame_neg_xi[2]^2]]);
                                
resistance_matrix_pos_xi:=Matrix([[1-1/2*tangent_lab_frame_pos_xi[1]^2,                             -1/2*tangent_lab_frame_pos_xi[1]*tangent_lab_frame_pos_xi[2]],
                                 [  -1/2*tangent_lab_frame_pos_xi[1]*tangent_lab_frame_pos_xi[2],  1-1/2*tangent_lab_frame_pos_xi[2]^2]]);
                                


#-----------------------------------------------------------------------
# traction
#-----------------------------------------------------------------------
traction_lab_frame_neg_xi:=Vector(2):
traction_lab_frame_neg_xi:=resistance_matrix_neg_xi.(far_field_veloc_lab_frame_neg_xi-fibre_veloc_lab_frame_neg_xi);

traction_lab_frame_pos_xi:=Vector(2):
traction_lab_frame_pos_xi:=resistance_matrix_pos_xi.(far_field_veloc_lab_frame_pos_xi-fibre_veloc_lab_frame_pos_xi);


#-----------------------------------------------------------------------
# drag
#-----------------------------------------------------------------------
drag_lab_frame:=Vector([int(traction_lab_frame_neg_xi[1]*ds_dxi_neg_xi,xi=(q-1/2)..0)+
                        int(traction_lab_frame_pos_xi[1]*ds_dxi_pos_xi,xi=0..(q+1/2)),
                        int(traction_lab_frame_neg_xi[2]*ds_dxi_neg_xi,xi=(q-1/2)..0)+
                        int(traction_lab_frame_pos_xi[2]*ds_dxi_pos_xi,xi=0..(q+1/2))]);

#-----------------------------------------------------------------------
# torque about corner of boomerang (xi=0)
#-----------------------------------------------------------------------
infinitesimal_torque_neg_xi:=(r_lab_frame_neg_xi[1]-R0[1](t))*traction_lab_frame_neg_xi[2]-
                             (r_lab_frame_neg_xi[2]-R0[2](t))*traction_lab_frame_neg_xi[1];

infinitesimal_torque_pos_xi:=(r_lab_frame_pos_xi[1]-R0[1](t))*traction_lab_frame_pos_xi[2]-
                             (r_lab_frame_pos_xi[2]-R0[2](t))*traction_lab_frame_pos_xi[1];

torque_lab_frame:=int(infinitesimal_torque_neg_xi*ds_dxi_neg_xi,xi=(q-1/2)..0)+
                  int(infinitesimal_torque_pos_xi*ds_dxi_pos_xi,xi=0..(q+1/2));






#-----------------------------------------------------------------------
# Check resultant drag and torque and plot the thing
#-----------------------------------------------------------------------
test_drag_x:=simplify(eval(subs(test_flow_parameters,drag_lab_frame[1])));
test_drag_y:=simplify(eval(subs(test_flow_parameters,drag_lab_frame[2])));
test_torque:=simplify(eval(subs(test_flow_parameters,torque_lab_frame)));

plot([
     [subs(plot_test_flow_parameters,subs(test_flow_parameters,r_lab_frame_neg_xi[1])),
      subs(plot_test_flow_parameters,subs(test_flow_parameters,r_lab_frame_neg_xi[2])),
          xi=subs(test_flow_parameters,(q-1/2))..0],
     [subs(plot_test_flow_parameters,subs(test_flow_parameters,r_lab_frame_pos_xi[1])),
      subs(plot_test_flow_parameters,subs(test_flow_parameters,r_lab_frame_pos_xi[2])),
          xi=0..subs(test_flow_parameters,(q+1/2))]
      ],scaling=constrained);




#-----------------------------------------------------------------------
# Quick check: 
#-----------------------------------------------------------------------
#assign(W_hat=0.0001);
W_hat:=0.0001;
soln:=fsolve({test_drag_x,test_drag_y,test_torque},{UUU0=-10..10,VV=-10..10,Theta_eq=0..2*Pi});



#-----------------------------------------------------------------------
# Now solve for relevant parameters (apparently we have to specify
# limits for all or none of the unknowns; want to restrict theta
# to sensible range).
#-----------------------------------------------------------------------
VV_ig:=0.0;
UUU0_ig:=0.0;
Theta_eq_ig:=0.0;
W_hat_theta_eq_soln_list:=[];

success_count:=0;
nstep:=50;
W_hat_max:=0.6;
W_hat_offset:=1/10000;
for i from 0 to nstep do
   W_hat:=i/nstep*W_hat_max+W_hat_offset;
   for bla from 1 to 1 do
     soln:=fsolve({test_drag_x,test_drag_y,test_torque},{UUU0=UUU0_ig,VV=VV_ig,Theta_eq=Theta_eq_ig}):
   end do;
   if substring(convert(soln, 'string'), 2 .. 6) = "solve" then
      print("---------Soln not found------------");
   else
      UUU0_ig := subs(soln, UUU0);
      VV_ig := subs(soln, VV);
      Theta_eq_ig := frem(subs(soln, Theta_eq),evalf(2*Pi));
      success_count:=success_count+1;
      W_hat_theta_eq_soln_list := [op(W_hat_theta_eq_soln_list), [W_hat, Theta_eq_ig]];
      actual_plot[success_count]:=
      plot([
           [subs(t=0,soln,subs(test_flow_parameters,r_lab_frame_neg_xi[1])),
            subs(t=0,soln,subs(test_flow_parameters,r_lab_frame_neg_xi[2])),
            xi=subs(test_flow_parameters,(q-1/2))..0],
           [subs(t=0,soln,subs(test_flow_parameters,r_lab_frame_pos_xi[1])),
            subs(t=0,soln,subs(test_flow_parameters,r_lab_frame_pos_xi[2])),
            xi=0..subs(test_flow_parameters,(q+1/2))]
           ],scaling=constrained,view=[-1.5..1.5,-1.5..1.5],title = cat("W_hat=", i,"/",nstep," + ",W_hat_offset,"; theta_eq=",Theta_eq_ig));
   end if;
end do;

display([seq(actual_plot[t], t = 1 .. success_count)], insequence = true);
plot(W_hat_theta_eq_soln_list);